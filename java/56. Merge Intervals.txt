/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        
        if(intervals.size()<2)
        return intervals;
        
        List<Interval> list= new ArrayList<>();
        Collections.sort(intervals,new Comparator<Interval>(){
            
            @Override
            public int compare(Interval t1,Interval t2){
                return Integer.compare(t1.start,t2.start);   
            }
        });
        
        int start=intervals.get(0).start;
        int end=intervals.get(0).end;
        for(Interval interval:intervals)
        {
               if(interval.start<=end)
               {
                   end=Math.max(interval.end,end);
               }else
               {
                   list.add(new Interval(start,end));
                   start=interval.start;
                   end=interval.end;
               }
        }
        list.add(new Interval(start,end));
        return list;
    }
}