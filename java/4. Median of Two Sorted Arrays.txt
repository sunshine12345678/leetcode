public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
       int l1=nums1.length;
       int l2=nums2.length;
       int start1=0,start2=0;
       int end1=l1,end2=l2;
       if((l1+l2)%2==0)
       {
           return (findnKthValue(nums1,start1,end1,nums2,start2,end2,(l1+l2)/2)+findnKthValue(nums1,start1,end1,nums2,start2,end2,(l1+l2)/2+1))/2.0;
       }else{
           return findnKthValue(nums1,start1,end1,nums2,start2,end2,(l1+l2)/2+1);
       }
    }
    int findnKthValue(int []nums1,int start1,int end1,int []nums2,int start2,int end2,int k)
    {
        int m=end1-start1;
        int n=end2-start2;
        if(m<n)
        return findnKthValue(nums2,start2,end2,nums1,start1,end1,k);
        if(n==0)
        return nums1[k-1];
        if(k==1)
        return Math.min(nums1[start1],nums2[start2]);
        int n2=Math.min(n,k/2),m2=k-n2;
        
        if(nums1[start1+m2-1]<nums2[start2+n2-1])
        {
            return findnKthValue(nums1,start1+m2,end1,nums2,start2,end2,k-m2);
        }
        else if(nums1[start1+m2-1]>nums2[start2+n2-1])
        {
            return findnKthValue(nums1,start1,end1,nums2,start2+n2,end2,k-n2);
        }else{
            return nums1[start1+m2-1];
        }
    }
}