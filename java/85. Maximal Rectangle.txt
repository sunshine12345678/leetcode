public class Solution {
    public int maximalRectangle(char[][] matrix) {
        
        int max=0;
        
        if(matrix==null||matrix.length==0||matrix[0].length==0)
        return 0;
        
        int height[]=new int[matrix[0].length];
        for(int i=0;i<matrix.length;i++)
        {
            for(int j=0;j<matrix[0].length;j++)
            {
                if(matrix[i][j]=='0')
                {
                    height[j]=0;
                }else{
                    height[j]+=1;
                }
            }
            max=Math.max(max,largestRectangleArea(height));
        }
        return max;
    }
    
    public int largestRectangleArea(int[] heights) {

        Stack<Integer> stack=new Stack<>();
        int ret=0;
        for(int i=0;i<heights.length;i++)
        {
            if(stack.empty()||stack.peek()<=heights[i])
            {
                   stack.push(heights[i]);
            }else{
                int count=0;
                while(!stack.empty()&&stack.peek()>heights[i])
                {
                    count++;
                    ret=Math.max(ret,stack.peek()*count);
                    stack.pop();
                }
                for(int j=0;j<=count;j++)
                {
                    stack.push(heights[i]);
                }
            }
        }
        int count=1;
        while(!stack.empty()){
            ret=Math.max(ret,stack.peek()*count);
            stack.pop();
            count++;
        }
        return ret;
        
    }
   
}